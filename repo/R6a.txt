##コンパイラ実習 37022497 石本哲郎
##日付 10/17

##課題 6.1

#課題内容
Exp_constant::run を作成

#結果
7
120

#感想
基底クラスでのメソッド定義と派生クラスでのメソッド定義に違いがあると
コンパイルエラーが発生することがわかった。

##課題 6.2

#課題内容
Exp_variable::run を作成

#結果
4
10
2000
undefined variable: p

#感想
cerrを用いてエラーを表示していたが、エラーが発生した場合には
出力先のファイルにエラーを出力できないことがわかった。標準出力にすると
エラーの区別ができないのでlogファイルに出すような工夫が必要であると感じた。

##課題 6.3

#課題内容
Exp_operation1::run作成

#結果
-31

#感想
他の*や/の演算子はどうやって実装するのか気になった。

##課題 6.4

#課題内容
Exp_operation2::run作成

#結果
32
64

#感想
operand2つの場合はただ演算結果を返すだけなので簡単だった。


##課題 6.5

#課題内容
Exp_function::run作成

#結果
n = 7
ここで getint が呼ばれるので, 整数を入力
getint() = 4
ここで getchar が呼ばれるので, 文字を入力
getchar() = 5
次に putint(5); が呼ばれる
5
次に putchar('U'); が呼ばれる
U
最後に asum(n); が呼ばれる
asum(n) = 7


#感想
仮実装ではasumは第一引数をそのまま返すだけなので正しく動作していることがわかった。

##課題 6.6

#課題内容
St_assign::run作成

#結果
before
i = 0

#感想
returnによって処理を終了することがあるため、returnが
呼ばれたかどうかを確認する必要があることがわかった。

##課題 6.7

#課題内容
 St_list::run を作成

#結果
s = 0
i = -5
n = 5

#感想
listの中身に対してrunを実行すれば良いだけだったので簡単だった。

##課題 6.8

#課題内容
St_if::runを作成

#結果
s = 15
s = 17

#感想
if文の条件の結果に合わせて処理するだけだったので簡単だった。

##課題 6.9

#課題内容
St_while::runを作成

#結果
i = 4
n = 3
s = 12

#感想
make_whileの修正に苦戦した。

##課題 6.10

#課題内容
 St return::runを作成

#結果
i = -3
n = 3
s = 0
rd.val_is_returned = 1
rd.return_val = 6

#感想
valueがNullでないかを確認する必要があることがわかった。

##課題 6.11

#課題内容
St_function::run を作成

#結果

#感想




